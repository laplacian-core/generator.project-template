#!/usr/bin/env bash
set -e
SCRIPT_BASE_DIR=$(cd $"${BASH_SOURCE%/*}" && pwd)
PROJECT_BASE_DIR=$(cd $SCRIPT_BASE_DIR && cd ../.. && pwd)

FILE_INDEX_PATH="$PROJECT_BASE_DIR/model/project/files.yaml"

normalize_path () {
  local path=$1
  if [[ $path == ./* ]]
  then
    echo "${PROJECT_BASE_DIR}/$path"
  else
    echo $path
  fi
}

LOCAL_MODULE_REPOSITORY_PATH="$(normalize_path '{{project.module_repositories.local.path}}')"
LOCAL_MODULE_REPOSITORY_URL='{{project.module_repositories.local.url}}'
LOCAL_MODULE_REPOSITORY_BRANCH='{{project.module_repositories.local.branch}}'

TARGET_PROJECT_DIR="$(normalize_path '{{subproject.base_dir}}')"
TARGET_MODEL_DIR="$TARGET_PROJECT_DIR/model"
TARGET_PROJECT_MODEL_FILE="$TARGET_MODEL_DIR/project.yaml"

GENERATOR_SCRIPT_FILE_NAME=generate.sh
TARGET_SCRIPT_DIR="$TARGET_PROJECT_DIR/scripts"
TARGET_PROJECT_GENERATOR_SCRIPT="$TARGET_SCRIPT_DIR/$GENERATOR_SCRIPT_FILE_NAME"

main() {
  setup_local_module_repository
  {{#if subproject.source_repository ~}}
  checkout_from_code_repository
  {{/if}}
  create_project_model_file
  run_generator
}

setup_local_module_repository() {
  mkdir -p $LOCAL_MODULE_REPOSITORY_PATH
  {{#if project.module_repositories.local.url ~}}
  if [[ ! -d "$LOCAL_MODULE_REPOSITORY_PATH/.git" ]]
  then
    rm -rf $LOCAL_MODULE_REPOSITORY_PATH
    git clone \
      $LOCAL_MODULE_REPOSITORY_URL \
      $LOCAL_MODULE_REPOSITORY_PATH
  fi
  (cd $LOCAL_MODULE_REPOSITORY_PATH
    git checkout $LOCAL_MODULE_REPOSITORY_BRANCH
    git pull
  )
  {{/if}}
}

create_project_model_file() {
  mkdir -p $TARGET_MODEL_DIR
  cat <<END_FILE > $TARGET_PROJECT_MODEL_FILE
project:
  group: {{subproject.group}}
  name: {{subproject.name}}
  type: {{subproject.type}}
  namespace: {{subproject.namespace}}
  version: '{{subproject.version}}'
  description: |
    {{shift subproject.description 4}}
  {{#if subproject.source_repository ~}}
  source_repository:
    url: {{subproject.source_repository.url}}
    branch: {{subproject.source_repository.branch}}
  {{/if}}
  subprojects: []
  {{#if subproject.plugins ~}}
  plugins:
  {{#each subproject.plugins as |plugin| ~}}
  - group: {{plugin.group}}
    name: {{plugin.name}}
    version: '{{plugin.version}}'
  {{/each}}
  {{/if}}
  {{#if subproject.templates ~}}
  templates:
  {{#each subproject.templates as |template| ~}}
  - group: {{template.group}}
    name: {{template.name}}
    version: '{{template.version}}'
  {{/each}}
  {{/if}}
  {{#if subproject.models ~}}
  models:
  {{#each subproject.models as |model| ~}}
  - group: {{model.group}}
    name: {{model.name}}
    version: '{{model.version}}'
  {{/each}}
  {{/if}}
  {{#if subproject.model_files ~}}
  model_files:
  {{#each subproject.model_files as |files| ~}}
  - $(normalize_path '{{files}}')
  {{/each}}
  {{/if}}
  {{#if subproject.template_files ~}}
  template_files:
  {{#each subproject.template_files as |files| ~}}
  - $(normalize_path '{{files}}')
  {{/each}}
  {{/if}}
END_FILE
}

{{#if subproject.source_repository ~}}
checkout_from_code_repository() {
  if [[ ! -d $TARGET_PROJECT_DIR/.git ]]
  then
    mkdir -p $TARGET_PROJECT_DIR
    rm -rf $TARGET_PROJECT_DIR
    git clone \
        {{subproject.source_repository.url}} \
        $TARGET_PROJECT_DIR
  fi
  (cd $TARGET_PROJECT_DIR
    git checkout {{subproject.source_repository.branch}}
    git pull
  )
}
{{/if}}

run_generator() {
  mkdir -p $TARGET_SCRIPT_DIR
  (cd $TARGET_PROJECT_DIR
    curl -Ls https://git.io/fhxcl | bash
    ./scripts/update-project.sh
  )
}

main
